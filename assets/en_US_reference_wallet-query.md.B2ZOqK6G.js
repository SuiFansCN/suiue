import{_ as i,u as s,q as a,ao as e}from"./chunks/framework.B-vsaDWh.js";const u=JSON.parse('{"title":"WalletQuery","description":"","frontmatter":{},"headers":[],"relativePath":"en_US/reference/wallet-query.md","filePath":"en_US/reference/wallet-query.md"}'),t={name:"en_US/reference/wallet-query.md"},n=e(`<h1 id="walletquery" tabindex="-1">WalletQuery <a class="header-anchor" href="#walletquery" aria-label="Permalink to &quot;WalletQuery&quot;">​</a></h1><p>This API is used to query wallet information, such as balance, holding objects, etc.</p><p>So far, all queries have been one-time and there is no listening functionality. If you think your assets may have changed, you need to load again.</p><p>When calling the <code>loadXXX</code> method, you can use <code>await</code> to wait for the query to be completed. If you just want to display in the template, you don&#39;t need to wait.</p><h2 id="properties" tabindex="-1">properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;properties&quot;">​</a></h2><h3 id="balances" tabindex="-1">balances <a class="header-anchor" href="#balances" aria-label="Permalink to &quot;balances&quot;">​</a></h3><ul><li>type：<code>Reactive&lt;Record&lt;SuiTypeIdentifier, BalanceStruct&gt;&gt;</code></li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BalanceStruct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SuiTypeIdentifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    coinObjectCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    totalBalance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>All balance information is stored, the key is the <code>coin</code> type, and the value is the balance information.</p><h3 id="objects" tabindex="-1">objects <a class="header-anchor" href="#objects" aria-label="Permalink to &quot;objects&quot;">​</a></h3><ul><li>type：<code>Reactive&lt;Record&lt;SuiTypeIdentifier, ObjectStruct[]&gt;&gt;</code></li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ObjectStruct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SuiTypeIdentifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    digest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    display</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    contents</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>All object information is recorded, the key is the object type, and the value is the object array.</p><h3 id="coins" tabindex="-1">coins <a class="header-anchor" href="#coins" aria-label="Permalink to &quot;coins&quot;">​</a></h3><ul><li>type：<code>Computed&lt;Record&lt;SuiTypeIdentifier, CoinObjectStruct[]&gt;&gt;</code></li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CoinObjectStruct</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ObjectStruct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    contents</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        balance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>All <code>COIN</code> object information is recorded, the key is <code>coin</code> type, and the value is an array of <code>COIN</code> objects. This attribute actually filters out objects that do not belong to <code>0x2::sui::coin:COIN</code> in objects.</p><h3 id="suibalance" tabindex="-1">suiBalance <a class="header-anchor" href="#suibalance" aria-label="Permalink to &quot;suiBalance&quot;">​</a></h3><ul><li>type：<code>Computed&lt;BalanceStruct&gt;</code></li></ul><p>Records the balance information of SUI, which is equivalent to <code>balances[&#39;0x2::sui::sui::SUI&#39;]</code>.</p><h3 id="suicoins" tabindex="-1">suiCoins <a class="header-anchor" href="#suicoins" aria-label="Permalink to &quot;suiCoins&quot;">​</a></h3><ul><li>type：<code>Computed&lt;CoinObjectStruct[]&gt;</code></li></ul><p>All object information of <code>SUI-COIN</code> is recorded, which is equivalent to <code>coins[&#39;0x2::sui::sui::SUI&#39;]</code>.</p><h3 id="domain" tabindex="-1">domain <a class="header-anchor" href="#domain" aria-label="Permalink to &quot;domain&quot;">​</a></h3><ul><li>type：<code>Computed&lt;string&gt;</code></li></ul><p>The domain of the current account, or <code>undefined</code> if there is none.</p><h3 id="client" tabindex="-1">client <a class="header-anchor" href="#client" aria-label="Permalink to &quot;client&quot;">​</a></h3><ul><li>type：<code>SuiClient</code></li></ul><p>Exposes the <code>SuiClient</code> object, which can be used to conveniently call other <code>SuiClient</code> methods.</p><h3 id="clientql" tabindex="-1">clientQL <a class="header-anchor" href="#clientql" aria-label="Permalink to &quot;clientQL&quot;">​</a></h3><ul><li>type：<code>SuiGraphQLClient</code></li></ul><p>Exposed <code>SuiGraphQLClient</code> object, which can be used to conveniently call other <code>SuiGraphQLClient</code> methods.</p><h2 id="methods" tabindex="-1">methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;methods&quot;">​</a></h2><h3 id="async-loadbalances-cointype-suitypeidentifier" tabindex="-1">async loadBalances(coinType: <code>SuiTypeIdentifier</code>) <a class="header-anchor" href="#async-loadbalances-cointype-suitypeidentifier" aria-label="Permalink to &quot;async loadBalances(coinType: \`SuiTypeIdentifier\`)&quot;">​</a></h3><ul><li>returns：<code>BalanceStruct</code></li></ul><p>Load balance information for the specified <code>coin</code> type.</p><h3 id="async-loadallbalances" tabindex="-1">async loadAllBalances() <a class="header-anchor" href="#async-loadallbalances" aria-label="Permalink to &quot;async loadAllBalances()&quot;">​</a></h3><ul><li>returns：<code>Record&lt;SuiTypeIdentifier, BalanceStruct&gt;</code></li></ul><p>Load the balance information of all currency types in the account.</p><h3 id="async-loadobjects-objtype-suitypeidentifier" tabindex="-1">async loadObjects(objType: <code>SuiTypeIdentifier</code>) <a class="header-anchor" href="#async-loadobjects-objtype-suitypeidentifier" aria-label="Permalink to &quot;async loadObjects(objType: \`SuiTypeIdentifier\`)&quot;">​</a></h3><ul><li>returns：<code>ObjectStruct[]</code></li></ul><p>Loads all objects of the specified type.</p><h3 id="async-loadallobjects" tabindex="-1">async loadAllObjects() <a class="header-anchor" href="#async-loadallobjects" aria-label="Permalink to &quot;async loadAllObjects()&quot;">​</a></h3><ul><li>returns：<code>Record&lt;SuiTypeIdentifier, ObjectStruct[]&gt;</code></li></ul><p>Load all objects in the account.</p><h3 id="async-loadcoins-cointype-suitypeidentifier" tabindex="-1">async loadCoins(coinType: <code>SuiTypeIdentifier</code>) <a class="header-anchor" href="#async-loadcoins-cointype-suitypeidentifier" aria-label="Permalink to &quot;async loadCoins(coinType: \`SuiTypeIdentifier\`)&quot;">​</a></h3><ul><li>returns：<code>CoinObjectStruct[]</code></li></ul><p>Loads all <code>COIN</code> objects of the specified currency type.</p><p><code>loadCoins</code> actually calls the <code>loadObjects</code> method, but adds <code>0x2::sui::coin::COIN&lt;coinType&gt;</code> as a prefix.</p><p>so, all <code>coin</code> will be loaded to <code>objects</code>.</p><h3 id="async-loadallcoins" tabindex="-1">async loadAllCoins() <a class="header-anchor" href="#async-loadallcoins" aria-label="Permalink to &quot;async loadAllCoins()&quot;">​</a></h3><ul><li>returns：<code>Record&lt;SuiTypeIdentifier, CoinObjectStruct[]&gt;</code></li></ul><p>Load all <code>COIN</code> objects in the account.</p>`,53),l=[n];function h(o,c,p,d,r,k){return a(),s("div",null,l)}const g=i(t,[["render",h]]);export{u as __pageData,g as default};
